using System;
using System.Collections.Generic;
using Webprofusion.Scalex.Guitar;
using Webprofusion.Scalex.Music;
using Webprofusion.Scalex.Util;

namespace Webprofusion.Scalex.Rendering
{
    /// <summary>
    /// Renders the fretboard scale diagram for the current settings to the provided Graphics context 
    /// </summary>
    public class ScaleDiagramRenderer : Generic2DRenderer
    {
        public GuitarModel GuitarModel = null;
        public const int BasicFontSizePt = 5;

        public bool IsExportMode { get; set; }

        public ScaleDiagramRenderer()
        {
            GuitarModel = new GuitarModel();
        }

        public ScaleDiagramRenderer(Webprofusion.Scalex.PrefSettings myAppSettings)
        {
            //init scale renderer
            GuitarModel = new GuitarModel(myAppSettings);
        }

        public int GetFretboardHeight()
        {
            if (GuitarModel != null)
            {
                return GuitarModel.GuitarModelSettings.StringSpacing * (GuitarModel.NumberOfStrings - 1);
            }
            return 0;
        }

        public int GetDiagramWidth()
        {
            if (GuitarModel != null)
            {
                return GuitarString.FretNumberToClientX(GuitarModel.GuitarModelSettings.NumberFrets, 0, GuitarModel.GuitarModelSettings.FretSpacing);
            }
            return 0;
        }

        public void SetTuning(String tuning)
        {
            GuitarModel.SetTuning(tuning);
        }

        public void SetScale(String scale)
        {
            GuitarModel.SetScale(scale);
        }

        public List<string> AllTunings
        {
            get { return GuitarModel.GuitarModelSettings.TuningManager.GetTuningNameList(); }
        }

        public List<string> AllScales
        {
            get { return GuitarModel.GuitarModelSettings.ScaleManager.GetScaleNameList(); }
        }

        public List<string> AllKeys
        {
            get
            {
                return NoteManager.NoteNames;
            }
        }

        public void SetKey(string NoteName)
        {
            GuitarModel.SetKey(NoteName);
        }

        public override void Render(IGenericDrawingSurface canvas)
        {
            if (EnableRendering == false) return;

            //select and init rendering surface type
            IGenericDrawingSurface g = InitialiseDrawingSurface(canvas);

            int numberOfStrings = GuitarModel.GuitarModelSettings.CurrentTuning.NumberStrings;
            int numberFrets = GuitarModel.GuitarModelSettings.NumberFrets;

            int offsetX = -2;
            int offsetY = -16;

            int startX = offsetX + 10;
            int startY = offsetY + 20;

            ColorValue defaultCanvasFontColor = ColorPalette[ThemeColorPreset.Foreground];

            //draw gradient behind fretboard
            int fboardWidth = GuitarString.FretNumberToClientX(GuitarModel.GuitarModelSettings.NumberFrets, 0, GuitarModel.GuitarModelSettings.FretSpacing);

            int fboardHeight = GuitarModel.GuitarModelSettings.StringSpacing * (numberOfStrings - 1);

            if (GuitarModel.GuitarModelSettings.EnableFretboardBackgroundFill)
            {
                g.FillRectangle(startX, startY + GuitarModel.GuitarModelSettings.StringSpacing, fboardWidth, fboardHeight, ColorPalette[ThemeColorPreset.Background], ColorPalette[ThemeColorPreset.Subtle]);
            }

            //draw frets..
            DrawFrets(numberOfStrings, g, startX, startY);

            //draw strings (and note markers)..
            startY = 20 + offsetY + (GuitarModel.GuitarModelSettings.StringSpacing * numberOfStrings);
            startY = DrawGuitarStrings(numberOfStrings, g, offsetX, startY);

            //draw fret numbers
            if (GuitarModel.GuitarModelSettings.EnableFretNumbers)
            {
                startX = offsetX + 5;
                startY = offsetY + 25 + GuitarModel.GuitarModelSettings.StringSpacing * (numberOfStrings);

                DrawFretNumbers(numberFrets, g, startX, startY, defaultCanvasFontColor);
            }

            //show scale intervals & notes
            var scale = GuitarModel.SelectedScale;

            DrawScaleFormulaIntervals(g, offsetX + 4, startY, scale, defaultCanvasFontColor);
            DrawScaleNoteList(g, offsetX + 4, startY, scale, defaultCanvasFontColor);

            if (IsExportMode)
            {
                //draw copyright/watermark (for exported images)
                g.DrawString(offsetX + 5, startY + 10, "Generated by Guitar Toolkit - Copyright " + System.DateTime.Now.Year + " Soundshed.com");
            }

            startX = offsetX + 5;
            startY = offsetY + 20;

            //draw scale title
            if (GuitarModel.GuitarModelSettings.EnableDiagramTitle)
            {
                g.DrawString(startX, startY, GuitarModel.GuitarModelSettings.ScaleManager.GetKeyName(GuitarModel.GuitarModelSettings.EnableDiagramNoteNamesSharp).Trim() + " " + GuitarModel.GuitarModelSettings.ScaleManager.CurrentScale.Name.Trim() + " scale on " + GuitarModel.GuitarModelSettings.CurrentTuning.Name.Trim(), defaultCanvasFontColor);
            }
        }

        private void DrawScaleNoteList(IGenericDrawingSurface g, int offsetX, int startY, ScaleItem scale, ColorValue fontColor)
        {
            string scaleNotes = "";
            int notePos = 0;
            try
            {
                for (int i = 0; i < scale.ScaleIntervals.Length; i++)
                {
                    if (scale.ScaleIntervals[i])
                    {
                        notePos++;

                        scaleNotes += NoteManager.GetNoteName(scale.GetNoteAtSequencePosition(notePos, NoteManager.GetNoteByName(GuitarModel.SelectedKey)), true);
                        scaleNotes += "  ";
                    }
                }
            }
            catch (Exception)
            {
                System.Diagnostics.Debug.WriteLine("Exception: Couldn't resolve note name at one or more scale position");
            }

            g.DrawString(offsetX + 2, startY + 18, "Notes:", BasicFontSizePt, fontColor);
            g.DrawString(offsetX + 40, startY + 18, scaleNotes, BasicFontSizePt, fontColor);
        }

        private static void DrawScaleFormulaIntervals(IGenericDrawingSurface g, int offsetX, int startY, ScaleItem scale, ColorValue fontColor)
        {
            string scaleIntervals = "";
            for (int i = 0; i < scale.ScaleIntervals.Length; i++)
            {
                if (scale.ScaleIntervals[i])
                {
                    scaleIntervals += scale.GetIntervalNameInScale(i) + "  ";
                }
            }

            g.DrawString(offsetX + 2, startY + 11, "Intervals:", BasicFontSizePt, fontColor);
            g.DrawString(offsetX + 40, startY + 11, scaleIntervals, BasicFontSizePt, fontColor);
        }

        private int DrawGuitarStrings(int numberOfStrings, IGenericDrawingSurface g, int offsetX, int startY)
        {
            for (int i = 0; i < numberOfStrings; i++)
            {
                DrawGuitarString(GuitarModel.GuitarStrings[i], startY, offsetX, g);
                startY = startY - GuitarModel.GuitarModelSettings.StringSpacing;
            }
            return startY;
        }

        private void DrawFrets(int numberOfStrings, IGenericDrawingSurface g, int startX, int startY)
        {
            //draw nut
            double fretLength = (GuitarModel.GuitarModelSettings.StringSpacing * (numberOfStrings));
            g.DrawLine(startX - 2, startY + GuitarModel.GuitarModelSettings.StringSpacing, startX - 2, startY + fretLength, 2, ColorPalette[ThemeColorPreset.MutedForeground]);

            for (int i = 0; i < GuitarModel.GuitarModelSettings.NumberFrets + 1; i++)
            {
                int fretX = GuitarString.FretNumberToClientX(i, startX, GuitarModel.GuitarModelSettings.FretSpacing);
                int nextFretX = GuitarString.FretNumberToClientX(i + 1, startX, GuitarModel.GuitarModelSettings.FretSpacing);
                g.DrawLine(fretX, startY + GuitarModel.GuitarModelSettings.StringSpacing, fretX, startY + fretLength, 1, ColorPalette[ThemeColorPreset.Foreground]);

                //draw fret marker at specific points
                if (GuitarModel.FretsWithMarkers.Contains(i))
                {
                    double markerLeft = fretX - ((nextFretX - fretX) / 2) - 3;

                    if (GuitarModel.FretMarkerStyle == FretMarkerStyle.Dots)
                    {
                        if (i % 12 == 0) //fret 12 & 24 get double marker
                        {
                            g.FillEllipse(markerLeft, startY + (GuitarModel.GuitarModelSettings.StringSpacing * numberOfStrings) - GuitarModel.GuitarModelSettings.StringSpacing, 5, 5, ColorPalette[ThemeColorPreset.Subtle], ColorPalette[ThemeColorPreset.Subtle]);
                            g.FillEllipse(markerLeft, startY + (GuitarModel.GuitarModelSettings.StringSpacing * 2), 5, 5, ColorPalette[ThemeColorPreset.Subtle], ColorPalette[ThemeColorPreset.Subtle]);
                        }
                        else
                        {
                            g.FillEllipse(markerLeft, startY + (GuitarModel.GuitarModelSettings.StringSpacing * (numberOfStrings / 2)) + 2, 5, 5, ColorPalette[ThemeColorPreset.Subtle], ColorPalette[ThemeColorPreset.Subtle]);
                        }
                    }
                }
            }
        }

        private void DrawFretNumbers(int numberFrets, IGenericDrawingSurface g, int startX, int startY, ColorValue defaultCanvasFontColor)
        {
            for (int fretNum = 0; fretNum <= numberFrets; fretNum++)
            {
                int fretX = 3 + GuitarString.FretNumberToClientX(fretNum, startX, GuitarModel.GuitarModelSettings.FretSpacing);

                if (GuitarModel.GuitarModelSettings.EnableDisplacedFingeringMarkers)
                {
                    if (fretNum > 0)
                    {
                        var posL = fretX - GuitarString.FretNumberToClientX(fretNum - 1, 0, GuitarModel.GuitarModelSettings.FretSpacing);
                        fretX -= posL / 2;
                    }
                    else
                    {
                        fretX -= 5; //displace 0 fret by 5
                    }
                }

                g.DrawString(fretX, startY + 2, fretNum.ToString(), BasicFontSizePt, defaultCanvasFontColor);
            }
        }

        public void DrawGuitarString(GuitarString s, int startY, int offsetX, IGenericDrawingSurface g)
        {
            String strNote = "";
            int startX = offsetX + 10;

            //draw string
            int fretboardWidth = s.GetFretboardWidth();
            if (GuitarModel.GuitarModelSettings.EnableDiagramStrings)
            {
                var stringThickness = 0.3 + ((GuitarModel.NumberOfStrings - s.StringNumber) * 0.1);

                g.DrawLine(startX, startY - 0.5, startX + fretboardWidth, startY - 0.5, stringThickness, ColorPalette[ThemeColorPreset.Foreground]);
                g.DrawLine(startX, startY, startX + fretboardWidth, startY, stringThickness, ColorPalette[ThemeColorPreset.MutedForeground]);
            }

            for (int fretNum = 0; fretNum <= GuitarModel.GuitarModelSettings.NumberFrets; fretNum++)
            {
                int tmpVal = fretNum + (int)s.OpenTuning.SelectedNote;
                if (tmpVal > 11) tmpVal = tmpVal - 12;
                if (tmpVal > 11) tmpVal = tmpVal - 12;

                int sclVal = (fretNum - (int)GuitarModel.GuitarModelSettings.ScaleManager.CurrentKey) + (int)s.OpenTuning.SelectedNote;
                if (sclVal < 0) sclVal = sclVal + 12;
                if (sclVal > 11) sclVal = sclVal - 12;
                if (sclVal > 11) sclVal = sclVal - 12;

                if (sclVal < 0) System.Diagnostics.Debug.WriteLine(sclVal);

                if (GuitarModel.SelectedScale.ScaleIntervals[sclVal] == true)
                {
                    if (fretNum <= GuitarModel.GuitarModelSettings.NumberFrets)
                    {
                        ColorValue strokeColor = ColorPalette[ThemeColorPreset.Foreground];
                        ColorValue fillColor = ColorPalette[ThemeColorPreset.Foreground];

                        if (fretNum == 0)
                        {
                            //fret zero has empty circle marker
                            fillColor = ColorPalette[ThemeColorPreset.Subtle];
                        }

                        if ((Note)tmpVal == GuitarModel.GetKey())
                        {
                            //root note has accent colour border
                            strokeColor = ColorPalette[ThemeColorPreset.Accent];
                        }

                        if (GuitarModel.GuitarModelSettings.EnableDisplacedFingeringMarkers)
                        {
                            //displace marker to place behind fret

                            if (fretNum > 0)
                            {
                                var posL = startX - GuitarString.FretNumberToClientX(fretNum - 1, 0, GuitarModel.GuitarModelSettings.FretSpacing);
                                startX -= posL / 2;
                                startX += (GuitarModel.GuitarModelSettings.MarkerSize / 2);
                            }
                            else
                            {
                                //fret 0, displace marker behind nut
                                startX = startX - (GuitarModel.GuitarModelSettings.MarkerSize / 2);
                            }
                        }

                        //draw note marker centered behind fret
                        if (GuitarModel.GuitarModelSettings.EnableNoteColours == true)
                        {
                            var noteColor = NoteManager.GetNoteColour((Note)tmpVal, 2);

                            g.FillEllipse(startX - (GuitarModel.GuitarModelSettings.MarkerSize / 2), startY - (GuitarModel.GuitarModelSettings.MarkerSize / 2), GuitarModel.GuitarModelSettings.MarkerSize, GuitarModel.GuitarModelSettings.MarkerSize, ColorPalette[ThemeColorPreset.MutedBackground], noteColor);
                        }
                        else
                        {
                            g.FillEllipse(startX - (GuitarModel.GuitarModelSettings.MarkerSize / 2), startY - (GuitarModel.GuitarModelSettings.MarkerSize / 2), GuitarModel.GuitarModelSettings.MarkerSize, GuitarModel.GuitarModelSettings.MarkerSize, fillColor, strokeColor);
                        }

                        //if enabled, draw note name/sequence number
                        if (GuitarModel.GuitarModelSettings.EnableDiagramNoteNames || GuitarModel.GuitarModelSettings.EnableDiagramNoteSequence || GuitarModel.GuitarModelSettings.EnableDiagramScaleIntervals)
                        {
                            if (GuitarModel.GuitarModelSettings.EnableDiagramNoteNames) strNote = NoteManager.GetNoteName((Note)tmpVal, GuitarModel.GuitarModelSettings.EnableDiagramNoteNamesSharp);
                            if (GuitarModel.GuitarModelSettings.EnableDiagramNoteSequence) strNote = "" + GuitarModel.GuitarModelSettings.ScaleManager.CurrentScale.GetSequenceNumberInScale(sclVal);
                            if (GuitarModel.GuitarModelSettings.EnableDiagramScaleIntervals) strNote = "" + GuitarModel.GuitarModelSettings.ScaleManager.CurrentScale.GetIntervalNameInScale(sclVal);

                            double markerFontSize = BasicFontSizePt;
                            double labelX = startX - (GuitarModel.GuitarModelSettings.MarkerSize * 0.45);
                            double labelY = startY - (markerFontSize * 0.3);
                            if (strNote.Length == 1)
                            {
                                labelX += markerFontSize * 0.3;
                                g.DrawString(labelX + 0.5, labelY + 0.5, strNote, markerFontSize, ColorPalette[ThemeColorPreset.TextShadow]); //shadow
                                g.DrawString(labelX, labelY, strNote, markerFontSize, ColorPalette[ThemeColorPreset.ForegroundText]);
                            }
                            else
                            {
                                labelX += markerFontSize * 0.2;
                                labelY += markerFontSize * 0.1;
                                g.DrawString(labelX + 0.5, labelY + 0.5, strNote, markerFontSize * .8, ColorPalette[ThemeColorPreset.TextShadow]);
                                g.DrawString(labelX, labelY, strNote, markerFontSize * .8, ColorPalette[ThemeColorPreset.ForegroundText]);
                            }
                        }
                    }
                }

                startX = GuitarString.FretNumberToClientX(fretNum + 1, offsetX + 10, GuitarModel.GuitarModelSettings.FretSpacing);
            }
        }
    }
}